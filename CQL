Neo4j

# 增creat：

```CQL
CREATE (
   <node-name>:<label-name>
   { 	
      <Property1-name>:<Property1-Value>
      ........
      <Propertyn-name>:<Propertyn-Value>
   }
)
------------------------------------
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})

```

# 查match：

```CQL
MATCH 
(
   <node-name>:<label-name>
)
------------------------------------
MATCH (tom {name: "Tom Hanks"}) RETURN tom
```

# 返回return：

```CQL
MATCH (tom {name: "Tom Hanks"}) RETURN tom
MATCH (cloudAtlas {title: "Cloud Atlas"}) RETURN cloudAtlas
MATCH (people:Person) RETURN people.name LIMIT 10
MATCH (nineties:Movie) WHERE nineties.released >= 1990 AND nineties.released < 2000 RETURN nineties.title
```



```CQL
RETURN 
   <node-name>.<property1-name>,
   ........
   <node-name>.<propertyn-name>
   
---------------------------------------
RETURN tom,tomHanksMovies   返回节点&节点关系

RETURN people.name, Type(relatedTo), relatedTo  返回值
```

# match&ruturn

```CQL
--List all Tom Hanks movies
MATCH (tom:Person {name: "Tom Hanks"})-[:ACTED_IN]->(tomHanksMovies) RETURN tom,tomHanksMovies

--Who directed "Cloud Atlas"?
MATCH (cloudAtlas {title: "Cloud Atlas"})<-[:DIRECTED]-(directors) RETURN directors.name

--Tom Hanks' co-actors...
MATCH (tom:Person {name:"Tom Hanks"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN coActors.name

--How people are related to "Cloud Atlas"...
MATCH (people:Person)-[relatedTo]-(:Movie {title: "Cloud Atlas"}) RETURN people.name, Type(relatedTo), relatedTo
```

# 关系基础

```
CREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})
CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})
CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})
CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})
CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})
CREATE (JoelS:Person {name:'Joel Silver', born:1952})
CREATE
  (Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),
  (Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),
  (Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),
  (Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),
  (LillyW)-[:DIRECTED]->(TheMatrix),
  (LanaW)-[:DIRECTED]->(TheMatrix),
  (JoelS)-[:PRODUCED]->(TheMatrix)
```

# where

简单WHERE子句语法
WHERE <condition>

复杂WHERE子句语法
WHERE <condition> <boolean-operator> <condition>
我们可以使用布尔运算符在同一命令上放置多个条件。 请参考下一节，了解Neo4j CQL中可用的布尔运算符。

<condition>语法：
<property-name> <comparison-operator> <value>

and  or not xor        = < > <= >= <>(不等于)



# 删除节点

```CQL
DELETE <node-name-list>
```

```
DELETE <node1-name>,<node2-name>,<relationship-name>
```

# 删除标签和属性

```
REMOVE <property-name-list>
```

```
MATCH (book { id:122 })
REMOVE book.price
RETURN book
```

# 添加新属性

```
MATCH (book:Book)
SET book.title = 'superstar'
RETURN book
```

# 排序

```
MATCH (emp:Employee)
RETURN emp.empid,emp.name,emp.salary,emp.deptno
ORDER BY emp.name
```

## 合并

它将两组结果中的公共行组合并返回到一组结果中。 它不从两个节点返回重复的行。

```
<MATCH Command1>
   UNION
<MATCH Command2>
```

## 方向关系

```
CREATE (<node1-details>)-[<relationship-details>]->(<node2-details>)
```

```
MATCH (bacon:Person {name:"Kevin Bacon"})-[*1..4]-(hollywood)
RETURN DISTINCT hollywood



MATCH p=shortestPath(
  (bacon:Person {name:"Kevin Bacon"})-[*]-(meg:Person {name:"Meg Ryan"})
)
RETURN p

MATCH (tom:Person {name:"Tom Hanks"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors),
      (coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(cocoActors)
WHERE NOT (tom)-[:ACTED_IN]->()<-[:ACTED_IN]-(cocoActors) AND tom <> cocoActors
RETURN cocoActors.name AS Recommended, count(*) AS Strength ORDER BY Strength DESC

MATCH (tom:Person {name:"Tom Hanks"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors),
      (coActors)-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(cruise:Person {name:"Tom Cruise"})
RETURN tom, m, coActors, m2, cruise
```


match (n),(p) where id(n)=2422 and id(p)=5041 with n,p create (n)-[:导致]->(p)


//match (re:Report {report_id:'61555cad1c1cf07cc8ae3405'})-[r:间接影响]->(t:Trigger_Label),
//(re:Report {report_id:'61555cad1c1cf07cc8ae3405'})-[:扣分]->(d:Display_Label)
//(t:Trigger_Label)-[:导致]->(d:Display_Label)
//return re,t,d
match path=((re:Report {report_id:'61555cad1c1cf07cc8ae3405'})-[*1..2]->(d:Display_Label))
//      path2=((re:Report {report_id:'61555cad1c1cf07cc8ae3405'})-[*1]-(c))
//where (re:Report {report_id:'61555cad1c1cf07cc8ae3405'})-[:扣分]->(d:Display_Label)
return path
//return re,type(r),t,type(r2),d
